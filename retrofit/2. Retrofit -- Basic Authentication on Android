---
title: 2. Retrofit -- Basic Authentication on Android 
tags: android,Retrofit,tutorial
grammar_cjkRuby: true
---

[toc]

上一节课中，我们创建了用于执行 `API/HTTP` 请求的原始 `Android` 客户端版本。本节课中，我们将使用上节课的客户端，对它进行增强，给它添加基本的认证功能。

## 整合基本的认证
---
首先，更新 `ServiceGenerator` 类，添加方法，用于把认证添加到请求上。下面的代码使用 `1.9`、`2.0` 版本分别进行了扩展：

### Retrofit 1.9

``` java?linenums=true
public class ServiceGenerator {

    public static final String API_BASE_URL = "https://your.api-base.url";

    private static RestAdapter.Builder builder = new RestAdapter.Builder()
                .setEndpoint(API_BASE_URL)
                .setClient(new OkClient(new OkHttpClient()));

    public static <S> S createService(Class<S> serviceClass) {
        return createService(serviceClass, null, null);
    }

    public static <S> S createService(Class<S> serviceClass, String username, String password) {
        if (username != null && password != null) {
            // concatenate username and password with colon for authentication
            String credentials = username + ":" + password;
            // create Base64 encodet string
            final String basic =
                    "Basic " + Base64.encodeToString(credentials.getBytes(), Base64.NO_WRAP);

            builder.setRequestInterceptor(new RequestInterceptor() {
                @Override
                public void intercept(RequestFacade request) {
                    request.addHeader("Authorization", basic);
                    request.addHeader("Accept", "application/json");
                }
            });
        }

        RestAdapter adapter = builder.build();
        return adapter.create(serviceClass);
    }
}
```
### Retrofit 2.0

``` java?linenums=true
public class ServiceGenerator {

    public static final String API_BASE_URL = "https://your.api-base.url";

    private static OkHttpClient.Builder httpClient = new OkHttpClient.Builder();

    private static Retrofit.Builder builder =
            new Retrofit.Builder()
                    .baseUrl(API_BASE_URL)
                    .addConverterFactory(GsonConverterFactory.create());

    public static <S> S createService(Class<S> serviceClass) {
        return createService(serviceClass, null, null);
    }

    public static <S> S createService(Class<S> serviceClass, String username, String password) {
        if (username != null && password != null) {
            String credentials = username + ":" + password;
            final String basic =
                    "Basic " + Base64.encodeToString(credentials.getBytes(), Base64.NO_WRAP);

            httpClient.addInterceptor(new Interceptor() {
                @Override
                public Response intercept(Interceptor.Chain chain) throws IOException {
                    Request original = chain.request();

                    Request.Builder requestBuilder = original.newBuilder()
                        .header("Authorization", basic)
                        .header("Accept", "application/json")
                        .method(original.method(), original.body());

                    Request request = requestBuilder.build();
                    return chain.proceed(request);
                }
            });
        }

        OkHttpClient client = httpClient.build();
        Retrofit retrofit = builder.client(client).build();
        return retrofit.create(serviceClass);
    }
}
```
新方法中，多了两个参数：`username` 和 `password`。创建客户端的基本方法与老方法一样：使用 `RestAdapter`（`2.0` 版本是 `Retrofit`）类为所有的 `HTTP` 请求和响应处理创建 `OKHttp` 客户端。

新方法的不同在于：使用了 `RequestInterceptor`（`2.0` 版本是 `Inteceptor`）类来为 `OKHttp` 客户端执行的 `HTTP` 请求设置认证的头部。当然，只有提供了 `username` 和 `password` 参数，才会设置的。如果该方法没有接收到 `username` 和 `password` 参数，那么它创建的客户端与第一个方法相同。

关于验证部分，我们必须调整 `username` 和 `password` 的格式。基本认证请求把所有值当作一个以逗号分隔的多行索引字符串。此外，新创建的字符串必须是 `Base64` 格式的编码。

大多数的 `webservice` 和 `API` 都会对 `HTTP` 请求的认证头部进行计算。这就是为什么我们要把编码认证的值设置到头部。如果你调用 `web` 服务的客户端使用了其它的头部字段来接收用户的认证，那你应该把头部的 `Authorization` 转换为你服务所需的字段。

如果你想使用某种特定的格式来接收服务响应，那么，`Accept` 头部字段起着决定性的作用。在示例中，我们要求服务器返回的信息格式是 `JSON`。这是因为我们配置了 `retrofit` 使用 `Google GSON` 把序列化的对象和 `JSON` 互相转换。

## 用法
---
新方法的调用方法与上节课旧方法的调用方法一样。假定，我们定义了一个 `LoginService`：

### Retrofit 1.9

``` java?linenums=true
public interface LoginService {  
    @POST("/login")
    void basicLogin(Callback<User> cb);
}
```
### Retrofit 2.0

``` java?linenums=true
public interface LoginService {  
    @POST("/login")
    Call<User> basicLogin();
}
```

上面的接口只有一个方法：`basicLogin`。它的响应值类型是：`User`，没有其它的查询、或路径参数。

现在，我们创建一个客户端并把认证信息（`username password`）传入：

### Retrofit 1.9

``` java?linenums=true
LoginService loginService =  
    ServiceGenerator.createService(LoginService.class, "user", "secretpassword");
loginService.basicLogin(new Callback<User>() {  
    @Override
    public void success(User user, Response response) {
        // user object available
    }

    @Override
    public void failure(RetrofitError error) {
        // handle errors, too
    }
});
```
### Retrofit 2.0

``` java?linenums=true
LoginService loginService =  
   ServiceGenerator.createService(LoginService.class, "user", "secretpassword");
Call<User> call = loginService.basicLogin();  
call.enqueue(new Callback<User >() {  
    @Override
    public void onResponse(Call<User> call, Response<User> response) {
        if (response.isSuccessful()) {
            // user object available
        } else {
            // error response, no access to resource?
        }
    }

    @Override
    public void onFailure(Call<User> call, Throwable t) {
        // something went completely south (like no internet connection)
        Log.d("Error", t.getMessage());
    }
}
```

`ServiceGenerator` 方法将创建包含预定义认证头部的 `HTTP` 客户端。一旦调用 `loginService` 的 `basicLogin` 方法，提供的认证信息将自动被传入到请求的 `API` 端点。